generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  firstName        String
  lastName         String
  initials         String
  dob              DateTime
  gender           Gender?
  email            String      @unique
  passwordHash     String
  mobileNumber     String      @unique
  roleId           Int
  role             Role        @relation(fields: [roleId], references: [id])
  kycStatus        KYCStatus
  panNumber        String?
  preferredLanguage String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  lastLoginAt      DateTime?
  isActive         Boolean     @default(true)
  isVerified       Boolean     @default(false)
  resetToken       String?     @unique
  resetTokenExpiry DateTime?
  loginAttempts    Int?
  bankAccounts     BankAccount[]
  savedCards       String[]
  address          Address?
  customers        Customer[]
  revenues         Revenue[]
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          Int       @id @default(autoincrement())
  name        RoleName  @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
}

model BankAccount {
  id           Int      @id @default(autoincrement())
  userId       Int
  bankName     String
  accountNumber String
  accountType  AccountType
  ifscCode     String?
  currency     String
  isPrimary    Boolean
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  status       AccountStatus
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  email       String
  phoneNumber String?
  imageUrl    String?
  addressId   Int?  // Reference to Address model
  gstNumber   String?
  taxId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   // "Active" or "Inactive"

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices    Invoice[]  // One-to-Many relationship with Invoice
}

model Invoice {
  id             Int      @id @default(autoincrement())
  customerId     Int
  amount         Float
  currency       String
  date           DateTime
  dueDate        DateTime
  status         String  // "pending", "paid", "overdue", "canceled"
  taxAmount      Float?
  discountAmount Float?
  totalAmount    Float
  paymentMethod  String?  // "Credit Card", "Bank Transfer", "UPI", "Cash"
  transactionId  String?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Revenue {
  id              Int      @id @default(autoincrement())
  userId          Int
  month           String
  totalRevenue    Float
  currency        String
  totalInvoices   Int
  paidInvoices    Int
  pendingInvoices Int
  taxCollected    Float?
  discountGiven   Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  Male
  Female
  Other
}

enum KYCStatus {
  Pending
  Verified
  Rejected
}

enum RoleName {
  Customer
  User
  Admin
}

enum AccountType {
  Savings
  Checking
  Business
}

enum AccountStatus {
  Active
  Inactive
  Closed
}

enum CustomerStatus {
  Active
  Inactive
}

enum InvoiceStatus {
  pending
  paid
  overdue
  canceled
}

enum PaymentMethod {
  CreditCard
  BankTransfer
  UPI
  Cash
}
