generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change if using a different database
  url      = env("POSTGRES_URL")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id                String        @id @default(uuid())
  firstName         String
  lastName          String
  email             String        @unique
  passwordHash      String
  mobileNumber      String
  initials          String
  dob               String
  gender            String?
  profilePictureUrl String?
  address           Address?
  roleId            String
  role              Role          @relation(fields: [roleId], references: [id])
  kycStatus         String
  panNumber         String?
  preferredLanguage String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  lastLoginAt       DateTime?
  isActive          Boolean       @default(true)
  isVerified        Boolean       @default(false)
  loginAttempts     Int?
  bankAccounts      BankAccount[]
  savedCards        String[]

  // Added missing relations
  customer Customer?
  revenues Revenue[]
}

model Address {
  id         String    @id @default(uuid())
  street     String
  city       String
  state      String
  country    String
  zipCode    String
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @unique // Added @unique
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @unique // Added @unique
}

model BankAccount {
  id            String   @id @default(uuid())
  userId        String
  bankName      String
  accountNumber String
  accountType   String
  ifscCode      String?
  currency      String
  isPrimary     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        String
  user          User     @relation(fields: [userId], references: [id])
}

model Customer {
  id          String   @id @default(uuid())
  userId      String   @unique
  name        String
  email       String   @unique
  phoneNumber String?
  imageUrl    String?
  address     Address?
  gstNumber   String?
  taxId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String

  user    User      @relation(fields: [userId], references: [id])
  Invoice Invoice[]
}

model Invoice {
  id             String   @id @default(uuid())
  customerId     String
  amount         Float
  currency       String
  date           DateTime
  dueDate        DateTime
  status         String
  taxAmount      Float?
  discountAmount Float?
  totalAmount    Float
  paymentMethod  String?
  transactionId  String?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
}

model Revenue {
  id              String   @id @default(uuid())
  userId          String
  month           String
  totalRevenue    Float
  currency        String
  totalInvoices   Int
  paidInvoices    Int
  pendingInvoices Int
  taxCollected    Float?
  discountGiven   Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
